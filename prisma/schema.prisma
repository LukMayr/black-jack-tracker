// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED") // Uncomment if using < Prisma 5.10
}

enum Role {
  OWNER
  PLAYER
}

enum Result {
  WIN
  LOSS
  DRAW
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  emailVerified DateTime?
  entries       Entry[]
  userRooms     UserRoom[]
  accounts      Account[]
  sessions      Session[]
}

model Room {
  id           String       @id @default(cuid())
  name         String
  inviteCode   String       @unique
  userRooms    UserRoom[]
  gameSessions GameSession[]
}

model UserRoom {
  id      String  @id @default(cuid())
  userId  String
  roomId  String
  balance Int     @default(2000)
  role    Role    @default(PLAYER)
  user    User    @relation(fields: [userId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model GameSession {
  id         String       @id @default(cuid())
  date       DateTime     @default(now())
  roomId     String
  room       Room         @relation(fields: [roomId], references: [id])
  entries    Entry[]
}

model Entry {
  id            String       @id @default(cuid())
  userId        String
  gameSessionId String
  amount        Int
  result        Result 
  user          User         @relation(fields: [userId], references: [id])
  gameSession   GameSession  @relation(fields: [gameSessionId], references: [id])
}

/// NextAuth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
